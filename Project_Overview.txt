

--- File: README.md ---

# Collaborative AI Team Project

## Overview
This project simulates a collaborative AI team consisting of a Team Leader and specialized agents for front-end, back-end, database, testing, and optimization. The Team Leader manages the project end-to-end, breaking it into tasks, assigning them to agents, and ensuring smooth communication and integration.

## File Structure
- **agents/**: Contains agent modules specialized in different aspects of development.
- **project_management/**: Contains the Team Leader who manages the project.
- **tasks/**: Manages task assignment and dependencies.
- **logs/**: Stores project logs.
- **utils/**: Utility functions and communication tools.
- **tests/**: Test cases for verification of each component.
- **main.py**: Entry point for project execution.

## How to Run
1. Install necessary dependencies.
2. Run the project using `python main.py`.



--- File: main.py ---

# collaborative_ai_team/main.py

from project_management.team_leader import TeamLeader
from utils.communication import CommunicationChannel


def main():
    # Initialize the communication channel
    communication_channel = CommunicationChannel()
    
    # Initialize the Team Leader and pass the communication channel to agents
    team_leader = TeamLeader(communication_channel)
    
    # Define project requirements
    requirements = "This project involves a user interface, backend API development, server-side logic, database integration, authentication for login, and performance optimization."    
    # Start the project analysis and task execution
    
    team_leader.analyze_project(requirements)
    
    # Save the log after completion
    team_leader.save_log_to_file()

    print("\nProject execution complete. Check the logs/project_log.txt file for details.")

if __name__ == "__main__":
    main()



--- File: Project_Overview.txt ---




--- File: logs/project_log.txt ---

Analyzing project requirements...
Dynamic task breakdown complete based on requirements.
Assigning tasks to frontend agent...
FrontEndAgent: UI design completed.
FrontEndAgent: HTML, CSS, and JS development completed.
Assigning tasks to backend agent...
Assigning tasks to database agent...
DatabaseAgent: Database setup completed.
DatabaseAgent: Database schema design completed.
Assigning tasks to testing agent...
Assigning tasks to optimization agent...
OptimizationAgent: Performance optimization completed.
OptimizationAgent: Code review completed with suggestions.



--- File: agents/testing_agent.py ---

# collaborative_ai_team/agents/testing_agent.py
from utils.communication import CommunicationChannel
import unittest

class TestingAgent:
    def __init__(self, communication_channel: CommunicationChannel):
        self.tasks = []
        self.communication_channel = communication_channel
        
        # Subscribe to backend agent updates
        self.communication_channel.subscribe('backend', self.handle_backend_update)

    def execute_tasks(self, tasks, team_leader):
        """
        Execute assigned testing tasks and update the team leader on progress.
        """
        self.tasks = tasks
        for task in self.tasks:
            # Placeholder logic for each task
            if task == "Unit Tests":
                self.run_unit_tests(team_leader)
            elif task == "Integration Tests":
                self.run_integration_tests(team_leader)
            else:
                self.unknown_task(task, team_leader)

    def run_unit_tests(self, team_leader):
        suite = unittest.TestLoader().discover('tests')
        result = unittest.TextTestRunner().run(suite)
        result_summary = f"TestingAgent: Unit tests completed with {len(result.failures)} failures."
        team_leader.update_project_log(result_summary)


    def run_integration_tests(self, team_leader):
        """
        Simulate running integration tests.
        """
        result = "TestingAgent: Integration tests completed successfully."
        team_leader.update_project_log(result)

    def handle_backend_update(self, message):
        print(f"FrontEndAgent received update from Backend: {message}")

    def unknown_task(self, task, team_leader):
        """
        Handle unknown tasks.
        """
        result = f"TestingAgent: Unknown task '{task}' - no action taken."
        team_leader.update_project_log(result)



--- File: agents/__init__.py ---




--- File: agents/frontend_agent.py ---

# collaborative_ai_team/agents/frontend_agent.py

from utils.communication import CommunicationChannel


class FrontEndAgent:
    def __init__(self, communication_channel: CommunicationChannel):
        self.tasks = []
        self.communication_channel = communication_channel
        
        # Subscribe to backend agent updates
        self.communication_channel.subscribe('backend', self.handle_backend_update)

    def execute_tasks(self, tasks, team_leader):
        """
        Execute assigned front-end tasks and update the team leader on progress.
        """
        self.tasks = tasks
        for task in self.tasks:
            # Check for each task and call the appropriate method
            if task == "Design UI":
                self.design_ui(team_leader)
            elif task == "Develop HTML/CSS/JS":
                self.develop_html_css_js(team_leader)
            elif task == "Design User Interface":
                self.design_user_interface(team_leader)
            else:
                self.unknown_task(task, team_leader)

    def design_ui(self, team_leader):
        """
        Simulate UI design.
        """
        result = "FrontEndAgent: UI design completed."
        team_leader.update_project_log(result)

    def develop_html_css_js(self, team_leader):
        """
        Simulate front-end development (HTML, CSS, JS).
        """
        result = "FrontEndAgent: HTML, CSS, and JS development completed."
        team_leader.update_project_log(result)

    def design_user_interface(self, team_leader):
        """
        Simulate user interface design.
        """
        result = "FrontEndAgent: User Interface design completed."
        team_leader.update_project_log(result)

    def unknown_task(self, task, team_leader):
        """
        Handle unknown tasks.
        """
        result = f"FrontEndAgent: Unknown task '{task}' - no action taken."
        team_leader.update_project_log(result)

    def handle_backend_update(self, message):
        print(f"FrontEndAgent received update from Backend: {message}")



--- File: agents/optimization_agent.py ---

# collaborative_ai_team/agents/optimization_agent.py
from utils.communication import CommunicationChannel

class OptimizationAgent:
    def __init__(self, communication_channel: CommunicationChannel):
        self.tasks = []
        self.communication_channel = communication_channel
        
        # Subscribe to backend agent updates
        self.communication_channel.subscribe('backend', self.handle_backend_update)

    def execute_tasks(self, tasks, team_leader):
        """
        Execute assigned optimization tasks and update the team leader on progress.
        """
        self.tasks = tasks
        for task in self.tasks:
            # Placeholder logic for each task
            if task == "Optimize Performance":
                self.optimize_performance(team_leader)
            elif task == "Code Review":
                self.code_review(team_leader)
            else:
                self.unknown_task(task, team_leader)

    def optimize_performance(self, team_leader):
        """
        Simulate performance optimization.
        """
        result = "OptimizationAgent: Performance optimization completed."
        team_leader.update_project_log(result)

    def code_review(self, team_leader):
        """
        Simulate a code review process.
        """
        result = "OptimizationAgent: Code review completed with suggestions."
        team_leader.update_project_log(result)

    def handle_backend_update(self, message):
        print(f"FrontEndAgent received update from Backend: {message}")

    def unknown_task(self, task, team_leader):
        """
        Handle unknown tasks.
        """
        result = f"OptimizationAgent: Unknown task '{task}' - no action taken."
        team_leader.update_project_log(result)



--- File: agents/database_agent.py ---

# collaborative_ai_team/agents/database_agent.py
from utils.communication import CommunicationChannel

class DatabaseAgent:
    def __init__(self, communication_channel: CommunicationChannel):
        self.tasks = []
        self.communication_channel = communication_channel
        
        # Subscribe to backend agent updates
        self.communication_channel.subscribe('backend', self.handle_backend_update)

    def execute_tasks(self, tasks, team_leader):
        """
        Execute assigned database tasks and update the team leader on progress.
        """
        self.tasks = tasks
        for task in self.tasks:
            # Placeholder logic for each task
            if task == "Set up Database":
                self.setup_database(team_leader)
            elif task == "Design Schema":
                self.design_schema(team_leader)
            else:
                self.unknown_task(task, team_leader)

    def setup_database(self, team_leader):
        """
        Simulate database setup.
        """
        result = "DatabaseAgent: Database setup completed."
        team_leader.update_project_log(result)

    def design_schema(self, team_leader):
        """
        Simulate schema design.
        """
        result = "DatabaseAgent: Database schema design completed."
        team_leader.update_project_log(result)

    def handle_backend_update(self, message):
        print(f"FrontEndAgent received update from Backend: {message}")

    def unknown_task(self, task, team_leader):
        """
        Handle unknown tasks.
        """
        result = f"DatabaseAgent: Unknown task '{task}' - no action taken."
        team_leader.update_project_log(result)



--- File: agents/backend_agent.py ---

# collaborative_ai_team/agents/backend_agent.py
from utils.communication import CommunicationChannel


class BackEndAgent:
    def __init__(self, communication_channel: CommunicationChannel):
        self.tasks = []
        self.communication_channel = communication_channel
        
        # Subscribe to backend agent updates
        self.communication_channel.subscribe('backend', self.handle_backend_update)

# In backend_agent.py
    def execute_tasks(self, tasks, team_leader):
        for task in self.tasks:
            try:
                if task == "Develop API":
                    self.develop_api(team_leader)
                elif task == "Integrate Database":
                    self.integrate_database(team_leader)
                else:
                    self.unknown_task(task, team_leader)
            except Exception as e:
                error_message = f"BackEndAgent: Error executing task '{task}': {e}"
                team_leader.update_project_log(error_message)
                print(error_message)  # For real-time error tracking


    def develop_api(self, team_leader):
        """
        Simulate API development.
        """
        result = "BackEndAgent: API development completed."
        team_leader.update_project_log(result)

    def integrate_database(self, team_leader):
        """
        Simulate database integration.
        """
        result = "BackEndAgent: Database integration completed."
        team_leader.update_project_log(result)

    def handle_backend_update(self, message):
        print(f"FrontEndAgent received update from Backend: {message}")

    def unknown_task(self, task, team_leader):
        """
        Handle unknown tasks.
        """
        result = f"BackEndAgent: Unknown task '{task}' - no action taken."
        team_leader.update_project_log(result)



--- File: agents/logs/project_log.txt ---




--- File: utils/__init__.py ---




--- File: utils/communication.py ---

# collaborative_ai_team/utils/communication.py

class CommunicationChannel:
    def __init__(self):
        # Stores subscriptions where keys are agent names, and values are lists of callback functions
        self.subscriptions = {}

    def subscribe(self, agent_name, callback):
        """
        Subscribe to updates from a specific agent.
        """
        if agent_name not in self.subscriptions:
            self.subscriptions[agent_name] = []
        self.subscriptions[agent_name].append(callback)

    def publish(self, agent_name, message):
        """
        Publish a message to all subscribers of a specific agent.
        """
        if agent_name in self.subscriptions:
            for callback in self.subscriptions[agent_name]:
                callback(message)



--- File: tasks/task_manager.py ---




--- File: tasks/__init__.py ---




--- File: tests/test_project.py ---




--- File: project_management/__init__.py ---




--- File: project_management/team_leader.py ---

# collaborative_ai_team/project_management/team_leader.py
from agents.frontend_agent import FrontEndAgent
from agents.backend_agent import BackEndAgent
from agents.database_agent import DatabaseAgent
from agents.testing_agent import TestingAgent
from agents.optimization_agent import OptimizationAgent
from utils.communication import CommunicationChannel
import os

class TeamLeader:
    def __init__(self, communication_channel: CommunicationChannel):
        self.agents = {
            'frontend': FrontEndAgent(communication_channel),
            'backend': BackEndAgent(communication_channel),
            'database': DatabaseAgent(communication_channel),
            'testing': TestingAgent(communication_channel),
            'optimization': OptimizationAgent(communication_channel)
        }
        # Initialize a project log list to record progress
        self.project_log = []

    def analyze_project(self, requirements):
        """
        Analyze project requirements and create a task breakdown.
        """
        self.project_log.append("Analyzing project requirements...")
        print("Team Leader: Analyzing project requirements...")
        
        tasks = self.break_down_tasks(requirements)
        self.assign_tasks(tasks)

    def break_down_tasks(self, requirements):
        """
        Dynamically break down project requirements into specific tasks for each agent.
        """
        tasks = {
            'frontend': [],
            'backend': [],
            'database': [],
            'testing': [],
            'optimization': []
        }
        
        # Convert requirements to lowercase for case-insensitive matching
        requirements = requirements.lower()
        
        # Analyze keywords and dynamically assign tasks
        if "ui" in requirements or "frontend" in requirements or "user interface" in requirements:
            tasks['frontend'].extend(["Design UI", "Develop HTML/CSS/JS"])
        
        if "api" in requirements or "backend" in requirements or "server" in requirements:
            tasks['backend'].extend(["Develop API"])
        
        if "database" in requirements or "data storage" in requirements:
            tasks['database'].extend(["Set up Database", "Design Schema"])
        
        if "testing" in requirements or "quality assurance" in requirements or "qa" in requirements:
            tasks['testing'].extend(["Unit Tests", "Integration Tests"])
        
        if "optimization" in requirements or "performance" in requirements or "speed" in requirements:
            tasks['optimization'].extend(["Optimize Performance", "Code Review"])
        
        if "authentication" in requirements or "login" in requirements or "user authentication" in requirements:
            tasks['backend'].append("Implement Authentication")

        # Logging for debugging purposes
        self.project_log.append("Dynamic task breakdown complete based on requirements.")
        print(f"Team Leader: Task breakdown - {tasks}")
        
        return tasks

    def assign_tasks(self, tasks):
        """
        Assign tasks to agents based on their expertise.
        """
        for agent_name, agent_tasks in tasks.items():
            self.project_log.append(f"Assigning tasks to {agent_name} agent...")
            print(f"Team Leader: Assigning tasks to {agent_name} agent...")
            agent = self.agents.get(agent_name)
            if agent:
                agent.execute_tasks(agent_tasks, self)

    def update_project_log(self, update):
        """
        Update the project log with a new entry.
        """
        self.project_log.append(update)
        print(update)  # Output for real-time tracking

    def save_log_to_file(self, filename="logs/project_log.txt"):
        """
        Save the project log to a file, creating the directory if it doesn't exist.
        """
        # Ensure the directory exists
        os.makedirs(os.path.dirname(filename), exist_ok=True)
        
        # Save the log to the file
        with open(filename, 'w') as log_file:
            for entry in self.project_log:
                log_file.write(f"{entry}\n")
        print("Team Leader: Project log saved to file.")
